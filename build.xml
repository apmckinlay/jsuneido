<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project default="build" name="jSuneido Ant build file">

	<!--	This file will build the following outputs:

			+ jsuneido.jar : lean jSuneido, no JSDI, no jsdebug
			+ jsuneido-arch-win32-x86.jar : full jSuneido, JSDI, jsdebug, win32-x86 only
			+ jsuneido-arch-win32-amd64.jar : full jSuneido, JSDI, jsdebug, win32-amd64 only
			+ jsuneido-arch-linux-amd64.jar : lean jSuneido with jsdebug for linux-amd64
			+ jsuneido-all.jar : full jSuneido with all architecture-specific libraries
	-->

	<!--                      -->
	<!-- REUSEABLE REFERENCES -->
	<!--                      -->

	<property name="lib.dir" value="lib"/>
	<property name="lib.lucene-core" value="lucene-core-4.8.1.jar"/>
	<property name="lib.lucene-analyzers-common" value="lucene-analyzers-common-4.8.1.jar"/>
	<property name="lib.lucene-queryparser" value="lucene-queryparser-4.8.1.jar"/>

	<property name="main.srcdir" value="src/main/java"/>
	<property name="main.dstdir.classes" value="target/classes"/>
	<property name="main.dstdir.jars" value="target/jar"/>
	<property name="main.dstdir.raw-jars" value="target/jar/raw"/>

	<path id="main.classpath">
		<pathelement location="${lib.dir}/asm-all-5.0.2.jar"/>
		<pathelement location="${lib.dir}/guava-18.0.jar"/>
		<pathelement location="${lib.dir}/jsr305-1.3.9.jar"/>
		<pathelement location="${lib.dir}/${lib.lucene-core}"/>
		<pathelement location="${lib.dir}/${lib.lucene-analyzers-common}"/>
		<pathelement location="${lib.dir}/${lib.lucene-queryparser}"/>
		<pathelement location="${lib.dir}/tools.jar"/> <!-- com.sun.jdi -->
		<pathelement location="${lib.dir}/trove-3.0.3.jar"/>
	</path>

	<patternset id="main.base.classes">
		<include name="**/*.class*"/>
		<exclude name="**/jsdi/tools/**"/>
		<exclude name="**/jsdi/suneido_protocol/**"/>
		<exclude name="**/jsdi/abi/**"/>
	</patternset>

	<patternset id="jsdi.extra.classes">
		<include name="**/jsdi/suneido_protocol/**"/>
	</patternset>

	<property name="jar.manifest.file" value="${main.dstdir.raw-jars}/MANIFEST.MF"/>
	<property name="jar.manifest.main-class" value="suneido.boot.Bootstrap"/>
	<property name="jar.name.prefix" value="jsuneido"/>
	<property name="jar.name.suffix-final" value=".jar"/>
	<property name="jar.name.suffix-raw" value="-raw.jar"/>

	<property name="jar.final.jsuneido" value="${main.dstdir.jars}/${jar.name.prefix}${jar.name.suffix-final}"/>
	<property name="jar.final.arch-win32-amd64" value="${main.dstdir.jars}/${jar.name.prefix}-arch-win32-amd64${jar.name.suffix-final}"/>
	<property name="jar.final.arch-win32-x86" value="${main.dstdir.jars}/${jar.name.prefix}-arch-win32-x86${jar.name.suffix-final}"/>
	<property name="jar.final.arch-linux-amd64" value="${main.dstdir.jars}/${jar.name.prefix}-arch-linux-amd64${jar.name.suffix-final}"/>
	<property name="jar.final.full" value="${main.dstdir.jars}/${jar.name.prefix}-full${jar.name.suffix-final}"/>

	<property name="jar.raw.jsuneido" value="${main.dstdir.raw-jars}/${jar.name.prefix}${jar.name.suffix-final}"/>
	<property name="jar.raw.arch-win32-amd64" value="${main.dstdir.raw-jars}/${jar.name.prefix}-arch-amd64-x86${jar.name.suffix-final}"/>
	<property name="jar.raw.arch-win32-x86" value="${main.dstdir.raw-jars}/${jar.name.prefix}-arch-win32-x86${jar.name.suffix-final}"/>
	<property name="jar.raw.arch-linux-amd64" value="${main.dstdir.raw-jars}/${jar.name.prefix}-arch-linux-amd64${jar.name.suffix-final}"/>
	<property name="jar.raw.full" value="${main.dstdir.raw-jars}/${jar.name.prefix}-full${jar.name.suffix-final}"/>

	<condition property="platform.windows">
		<os family="windows"/>
	</condition>
	<condition property="platform.linux">
		<and>
			<os family="unix"/>
			<not><os family="mac"/></not>
		</and>
	</condition>

	<!--                -->
	<!-- PUBLIC TARGETs -->
	<!--                -->

	<target name="build" description="Build all jSuneido JARS"
			depends="target-jsuneido,target-jsuneido-arch-win32-amd64,target-jsuneido-arch-win32-x86,target-jsuneido-arch-linux-amd64,target-jsuneido-full,required-files"/>

	<target name="clean" description="Delete all outputs"
			depends="clean-classes,clean-raw-jars,clean-jars"/>

	<target name="rebuild" description="Rebuild all jSuneido JARS"
			depends="clean,build"/>

	<target name="rebuild-everything" description="Rebuild native libraries and jSuneido JARS"
			depends="clean,jsdebug,jsdi,build"/>

	<target name="target-jsuneido"
			description="jsuneido.jar: Lean jSuneido, no native libraries or JSDI"
			depends="raw-jar">
		<java jar="${lib.dir}/proguard.jar" fork="true" failonerror="true">
			<arg value="-injars ${jar.raw.jsuneido}"/>
			<arg value="@jsuneido.pro"/>
			<arg value="@jsuneido-nojsdi.pro"/>
			<arg value="-outjars ${jar.final.jsuneido}"/>
		</java>
		<copy file="${jar.final.jsuneido}" todir="."/>
	</target>

	<target name="target-jsuneido-arch-win32-amd64"
			description="Windows x64 binaries plus JSDI included in JAR"
			depends="raw-jar-arch-win32-amd64"
	>
		<java jar="${lib.dir}/proguard.jar" fork="true" failonerror="true">
			<arg value="-injars ${jar.raw.arch-win32-amd64}"/>
			<arg value="@jsuneido.pro"/>
			<arg value="@jsuneido-jsdi-amd64.pro"/>
			<arg value="-outjars ${jar.final.arch-win32-amd64}"/>
		</java>
	</target>

	<target name="target-jsuneido-arch-win32-x86"
			description="Windows x86 binaries plus JSDI included in JAR"
			depends="raw-jar-arch-win32-x86"
	>
		<java jar="${lib.dir}/proguard.jar" fork="true">
			<arg value="-injars ${jar.raw.arch-win32-x86}"/>
			<arg value="@jsuneido.pro"/>
			<arg value="@jsuneido-jsdi-x86.pro"/>
			<arg value="-outjars ${jar.final.arch-win32-x86}"/>
		</java>
	</target>

	<target name="target-jsuneido-arch-linux-amd64"
			description="Linux jsdebug binary included in JAR"
			depends="raw-jar-arch-linux-amd64"
	>
		<java jar="${lib.dir}/proguard.jar" fork="true" failonerror="true">
			<arg value="-injars ${jar.raw.arch-linux-amd64}"/>
			<arg value="@jsuneido.pro"/>
			<arg value="@jsuneido-nojsdi.pro"/>
			<arg value="-outjars ${jar.final.arch-linux-amd64}"/>
		</java>
	</target>

	<target name="target-jsuneido-full"
			description="JAR containing all Java classes and native libraries"
			depends="raw-jar-full"
	>
		<java jar="${lib.dir}/proguard.jar" fork="true" failonerror="true">
			<arg value="-injars ${jar.raw.full}"/>
			<arg value="@jsuneido.pro"/>
			<arg value="@jsuneido-jsdi-amd64.pro"/>
			<arg value="@jsuneido-jsdi-x86.pro"/>
			<arg value="-outjars ${jar.final.full}"/>
		</java>
	</target>

	<!--                           -->
	<!-- INTERNAL TARGETS: GENERAL -->
	<!--                           -->

	<!--	NOTE: Don't include "description" element on internal targets or
			will lose their internalness -->

	<target name="compile" depends="when,dirs">
		<javac srcdir="${main.srcdir}" destdir="${main.dstdir.classes}"
				classpathref="main.classpath"
				includeAntRuntime="false"
				target="1.8"
				debug="true"
				debuglevel="vars"
		>
			<!--  Exclude JDBC stuff. Not currently implemented. -->
			<exclude name="**/jdbc/**"/>
			<!-- TODO: Refactor this build file so there are targets to -->
			<!--       a debugging version (containing debug symbols) -->
			<!--       and for building a 'release' version without them. -->
		</javac>
	</target>

	<target name="when">
		<tstamp>
			<format property="when" pattern="MMM d yyyy HH:mm:ss" locale="ENGLISH, CANADA"/>
		</tstamp>
		<!-- TODO: We could have WhenBuilt read from the manifest... -->
		<echo file="${main.srcdir}/suneido/WhenBuilt.java">
			// do not edit - generated by build.xml
			package suneido;
			public class WhenBuilt {
				public static String when() {
					return "${when} (Java)";
				}
			}
		</echo>
	</target>

	<target name="manifest" depends="when,dirs">
		<manifest file="${jar.manifest.file}">
			<attribute name="Main-Class" value="${jar.manifest.main-class}"/>
			<!--
				Newlines in Class-Path value are deliberate.
				NOTE: Putting in bare and lib/-relative variants of lucene makes
				it a bit easier to run the JAR without getting the dreaded 
				"ERROR: lucene not found" message. ClassLoader will just use the
				first version of the JAR that it finds.
			--> 
			<attribute name="Class-Path" value="${lib.lucene-core}
${lib.lucene-analyzers-common}
${lib.lucene-queryparser}
lib/${lib.lucene-core}
lib/${lib.lucene-analyzers-common}
lib/${lib.lucene-queryparser}"
			/>
			<section name="Built">
				<attribute name="By" value="${user.name}"/>
				<attribute name="When" value="${when}"/>
			</section>
		</manifest>
	</target>

	<target name="jsdebug">
		<ant antfile="build_jsdebug.xml" target="rebuild"/>
	</target>

	<target name="jsdi" depends="compile">
		<!--
			Depends on "compile" because the automatic code generation in
			the JSDI build requires certain .class files to be built.
		-->
		<ant antfile="build_jsdi.xml" target="rebuild"/>
	</target>

	<target name="clean-classes">
		<delete dir="${main.dstdir.classes}"/>
	</target>

	<target name="clean-raw-jars">
		<delete dir="${main.dstdir.raw-jars}"/>
	</target>

	<target name="clean-jars">
		<delete file="jsuneido.jar"/>
		<!--
			Delete the directory, being careful not to blindly follow the "lib"
			symbolic link. Per the Ant docs:
			
				'For historical reasons <delete dir="x"/> is different from
				 <delete><fileset dir="x"/></delete>, it will try to remove
				 everything inside "x" including "x" itself, not taking default
				 excludes into account, blindly following all symbolic links.
				 If you need more control, use a nested <fileset>.'
		-->
		<delete>
			<fileset dir="${main.dstdir.jars}" followsymlinks="false"/>
		</delete>
	</target>

	<target name="required-files" depends="dirs,links"/>

	<target name="dirs">
		<mkdir dir="${main.dstdir.classes}"/>
		<mkdir dir="${main.dstdir.jars}"/>
		<mkdir dir="${main.dstdir.raw-jars}"/>
	</target>

	<target name="links" depends="links-windows,links-linux">
		<!--
			Create a symbolic link to the "lib" directory from within the
			target JARs directory. This makes it easier to run the JARs from
			the target directory without getting a "ERROR: lucene not found"
			message.
		-->
	</target>

	<target name="links-windows" if="platform.windows">
		<!--
			To remove a symbolic link to a directory created with mklink, you
			have to use 'rmdir', not 'del', or it'll delete everything at node
			linked to: http://superuser.com/q/167076/223733.
		-->
		<exec executable="cmd" dir="${main.dstdir.jars}">
			<arg value="/C rmdir lib"/>
		</exec>
		<exec executable="cmd" dir="${main.dstdir.jars}">
			<arg value="/C mklink /D /J lib ${basedir}\lib"/> 
		</exec>
	</target>

	<target name="links-linux" if="platform.linux">
		<symlink resource="${basedir}/lib/" link="${basedir}/${main.dstdir.jars}"
				overwrite="yes"/>
	</target>

	<!--                            -->
	<!-- INTERNAL TARGETS: RAW JARS -->
	<!--                            -->

	<target name="raw-jar" depends="compile,manifest">
		<jar destfile="${jar.raw.jsuneido}" manifest="${jar.manifest.file}">
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="main.base.classes"/>
			</fileset>
		</jar>
	</target>

	<target name="raw-jar-arch-win32-amd64">
		<jar destfile="${jar.raw.arch-win32-amd64}" manifest="${jar.manifest.file}">
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="main.base.classes"/>
			</fileset>
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="jsdi.extra.classes"/>
			</fileset>
			<fileset dir="${main.dstdir.classes}">
				<include name="**/jsdi/abi/amd64/**"/>
			</fileset>
			<fileset dir=".">
				<include name="${lib.dir}/win32-amd64/*.dll"/>
			</fileset>
		</jar>
	</target>

	<target name="raw-jar-arch-win32-x86">
		<jar destfile="${jar.raw.arch-win32-x86}" manifest="${jar.manifest.file}">
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="main.base.classes"/>
			</fileset>
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="jsdi.extra.classes"/>
			</fileset>
			<fileset dir="${main.dstdir.classes}">
				<include name="**/jsdi/abi/x86/**"/>
			</fileset>
			<fileset dir=".">
				<include name="${lib.dir}/win32-x86/*.dll"/>
			</fileset>
		</jar>
	</target>

	<target name="raw-jar-arch-linux-amd64">
		<jar destfile="${jar.raw.arch-linux-amd64}" manifest="${jar.manifest.file}">
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="main.base.classes"/>
			</fileset>
			<fileset dir=".">
				<include name="${lib.dir}/linux-amd64/*.so"/>
			</fileset>
		</jar>
	</target>

	<target name="raw-jar-full">
		<jar destfile="${jar.raw.full}" manifest="${jar.manifest.file}">
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="main.base.classes"/>
			</fileset>
			<fileset dir="${main.dstdir.classes}">
				<patternset refid="jsdi.extra.classes"/>
			</fileset>
			<fileset dir="${main.dstdir.classes}">
				<include name="**/jsdi/abi/**"/>
			</fileset>
			<fileset dir=".">
				<include name="${lib.dir}/*/*.dll"/>
				<include name="${lib.dir}/*/*.so"/>
			</fileset>
		</jar>
	</target>

</project>
