/* Copyright 2013 (c) Suneido Software Corp. All rights reserved.
 * Licensed under GPLv2.
 */

package suneido.jsdi.tools;

import java.util.ArrayList;

/**
 * Class which produces automatically generated lines of code.
 * 
 * @author Victor Schappert
 * @since 20130630
 */
abstract class LineEditor {

	//
	// DATA
	//

	private final String matchToken;
	protected final ArrayList<String> lines;

	//
	// CONSTRUCTORS
	//

	/**
	 * Makes a new line editor with the given match token.
	 * 
	 * @param matchToken
	 *            Match token used by {@link FileEditor} to find the insertion
	 *            point for the lines generated by this line editor.
	 */
	public LineEditor(String matchToken) {
		this.matchToken = matchToken;
		this.lines = new ArrayList<>();
	}

	//
	// ACCESSORS
	//

	/**
	 * Return the match token used by {@link FileEditor} to find where to insert
	 * the generated lines.
	 * 
	 * @return Match token
	 */
	public final String getMatchToken() {
		return matchToken;
	}

	/**
	 * Generate and return the lines.
	 * 
	 * @return List of automatically-generated lines of code.
	 */
	public abstract ArrayList<String> makeLines();

	//
	// HELPERS
	//

	/**
	 * Add a string to the generated lines list.
	 * @param line Line to add
	 * @see #add(CharSequence)
	 */
	protected final void add(String line) {
		lines.add(line);
	}

	/**
	 * Add a string to the generated lines list.
	 * @param line Line to add
	 * @see #add(String)
	 */
	protected final void add(CharSequence line) {
		lines.add(line.toString());
	}

	//
	// STATIC HELPERS
	//

	/**
	 * Create an indent string.
	 * 
	 * @param count
	 *            Number of logical indents to generate.
	 * @return Indent string
	 */
	public static StringBuilder indent(int count) {
		StringBuilder result = new StringBuilder(4 * count);
		while (0 < count) {
			result.append("    ");
			--count;
		}
		return result;
	}

	/**
	 * Add double quotes around a character string.
	 * 
	 * @param str
	 *            String to quote.
	 * @return New StringBuilder containing the quoted value of {@code str}.
	 */
	public static StringBuilder quote(CharSequence str) {
		StringBuilder result = new StringBuilder(str.length() + 2);
		return result.append('"').append(str).append('"');
	}

	/**
	 * Generate a Doxygen {@code <code> ... </code>} tag wrapping the given
	 * string.
	 * @param str String to wrap
	 * @return {@code <code>[str]</code>}
	 */
	public static StringBuilder doxygenCode(CharSequence str) {
		StringBuilder result = new StringBuilder(str.length() + 13);
		return result.append("<code>").append(str).append("</code>");
	}

	/**
	 * Generate a Doxygen {@code <code> ... </code>} tag wrapping the name of the
	 * given class string.
	 * @param clazz Class to wrap
	 * @return {@code <code>[clazz.getName()]</code>}
	 */
	public static <T> StringBuilder doxygenCode(Class<T> clazz) {
		return doxygenCode(clazz.getName());
	}
}