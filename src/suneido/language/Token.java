/**
 *
 */
package suneido.language;

public enum Token {
	NIL, EOF, ERROR,
	IDENTIFIER, NUMBER, STRING,
	AND, OR,
	WHITE, COMMENT, NEWLINE,
	HASH, COMMA, COLON, SEMICOLON, Q_MARK, AT, DOT,
	R_PAREN, L_PAREN(R_PAREN),
	R_BRACKET, L_BRACKET(R_BRACKET),
	R_CURLY, L_CURLY(R_CURLY),
	IS, ISNT, MATCH, MATCHNOT, LT, LTE, GT, GTE,
	NOT, INC, DEC, BITNOT,
	ADD, SUB, CAT, MUL, DIV, MOD, LSHIFT, RSHIFT, BITOR, BITAND, BITXOR,
	EQ, ADDEQ, SUBEQ, CATEQ, MULEQ, DIVEQ, MODEQ,
	LSHIFTEQ, RSHIFTEQ, BITOREQ, BITANDEQ, BITXOREQ,
	// keywords
	IF, ELSE,
	WHILE, DO, FOR, FOREACH, FOREVER, BREAK, CONTINUE,
	SWITCH, CASE, DEFAULT,
	FUNCTION, CLASS,
	CATCH,
	DLL, STRUCT, CALLBACK,
	NEW, RETURN, TRY, THROW, SUPER,
	TRUE, FALSE, VALUE, IN, LIST, THIS,
	BOOL, CHAR, SHORT, LONG, INT64,
	FLOAT, DOUBLE, HANDLE, GDIOBJ,
	STRING_KEYWORD, BUFFER, RESOURCE, VOID;

	Token other;
	Token() {
		other = null;
	}
	Token(Token other) {
		this.other = other;
		other.other = this;
	}

	public boolean isOperator() {
		return ordinal() < IF.ordinal();
	}
}