<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project default="all" name="Build the JSDI C++ DLL">
	<property environment="env"/>
	<condition property="jsdi-path" value="${env.JSDI_PATH}" else="../jsdi">
		<isset property="env.JSDI_PATH"/>
	</condition>
	<property name="jsdi-vs-path" value="${jsdi-path}/vs/vs12_nov2013_ctp"/>
	<property name="jsdi-vs-sln" value="vs12_nov2013_ctp.sln"/>
	<property name="jsdi-package" value="suneido.jsdi"/>
	<property name="jsdi-tools-package" value="suneido.jsdi.tools"/>
    <property name="jsdi-make-config" value="amd64"/>
	<property name="jsdi-msbuild-config" value="Release-dll"/>
	<property name="java-lib-dir" value="lib"/>
	<property name="java-target-dir" value="target/classes"/>
	<property name="dll-src-dir-amd64" value="${jsdi-vs-path}/x64/${jsdi-msbuild-config}"/>
	<property name="dll-src-dir-x86" value="${jsdi-vs-path}/${jsdi-msbuild-config}"/>
	<property name="dll-dst-dir" value="lib"/>

	<path id="javah-classpath">
		<pathelement path="${java-target-dir}"/>
		<fileset dir="${java-lib-dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<target name="all" depends="build-amd64,build-x86"/>

	<target name="rebuild" depends="rebuild-amd64,rebuild-x86"/>

	<target name="clean" depends="clean-amd64,clean-x86"/>

	<target name="build-amd64" depends="gen_jni,gen_global_refs,gen_enums"
	        description="Use visual studio to make the AMD64 version of the dll"
	>
		<exec executable="msbuild" dir="${jsdi-vs-path}" failonerror="true">
			<arg value="${jsdi-vs-sln}"/>
			<arg value="/t:Build"/>
			<arg value="/p:Configuration=${jsdi-msbuild-config};Platform=x64"/>
			<arg value="/m"/>
		</exec>
		<copy file="${dll-src-dir-amd64}/jsdi.dll" todir="${dll-dst-dir}/amd64"
		      overwrite="true" failonerror="true"
		/>
	</target>

	<target name="clean-amd64">
		<exec executable="msbuild" dir="${jsdi-vs-path}" failonerror="true">
			<arg value="${jsdi-vs-sln}"/>
			<arg value="/t:Clean"/>
			<arg value="/p:Configuration=${jsdi-msbuild-config};Platform=x64"/>
		</exec>
	</target>

	<target name="rebuild-amd64" depends="clean-amd64,build-amd64"/>

	<target name="build-x86" depends="gen_jni,gen_global_refs,gen_enums"
	        description="Use visual studio to make the AMD64 version of the dll"
	>
		<exec executable="msbuild" dir="${jsdi-vs-path}" failonerror="true">
			<arg value="${jsdi-vs-sln}"/>
			<arg value="/t:Build"/>
			<arg value="/p:Configuration=${jsdi-msbuild-config};Platform=Win32"/>
			<arg value="/m"/>
		</exec>
		<copy file="${dll-src-dir-x86}/jsdi.dll" todir="${dll-dst-dir}/x86"
			  overwrite="true" failonerror="true"
		/>
	</target>

	<target name="clean-x86">
		<exec executable="msbuild" dir="${jsdi-vs-path}" failonerror="true">
			<arg value="${jsdi-vs-sln}"/>
			<arg value="/t:Clean"/>
			<arg value="/p:Configuration=${jsdi-msbuild-config};Platform=Win32"/>
		</exec>
	</target>

	<target name="rebuild-x86" depends="clean-x86,build-x86"/>

	<target name="gen_global_refs"
	        description="Generate C++ code for global references to JNI objects"
	>
		<property name="jsdi-global-ref-file-stem" value="global_refs"/>
		<java classname="${jsdi-tools-package}.GenerateGlobalReferences"
		      failonerror="true"
		>
			<classpath>
				<pathelement path="${java-target-dir}"/>
				<pathelement location="lib/asm-all-5.0.2.jar"/>
				<pathelement location="lib/guava-17.0.jar"/>
			</classpath>
			<arg path="${jsdi-path}/src/${jsdi-global-ref-file-stem}.h"/>
			<arg path="${jsdi-path}/src/${jsdi-global-ref-file-stem}.cpp"/>
		</java>
	</target>

	<target name="gen_enums"
	        description="Generate C++ enums from Java enums"
	>
		<property name="jsdi-enum-file-stem" value="java_enum"/>
		<java classname="${jsdi-tools-package}.GenerateSharedEnums"
		      failonerror="true"
		>
			<classpath>
				<pathelement path="${java-target-dir}"/>
				<pathelement location="lib/guava-17.0.jar"/>
			</classpath>
			<arg path="${jsdi-path}/src/${jsdi-enum-file-stem}.h"/>
			<arg path="${jsdi-path}/src/${jsdi-enum-file-stem}.cpp"/>
		</java>
	</target>

	<target name="gen_jni"
	        description="Create generated code files needed for the JNI
	                     interface with the JSDI DLL."
	>
		<!--  Note that the JSuneido Java project is the dominant
			  project, in the sense that C++ code is generated from Java
			  code, but Java code is not generated from C++ code. -->
		<javah class="${jsdi-package}.JSDI" classpath="${java-target-dir}" destdir="${jsdi-path}/src/gen"/>
		<javah class="${jsdi-package}.DllFactory" classpath="${java-target-dir}" destdir="${jsdi-path}/src/gen"/>
		<javah class="${jsdi-package}.type.Structure" classpath="${java-target-dir}" destdir="${jsdi-path}/src/gen"/>
		<javah class="${jsdi-package}.com.COMobject" classpath="${java-target-dir}" destdir="${jsdi-path}/src/gen"/>
		<javah class="${jsdi-package}.abi.x86.ThunkManagerX86" destdir="${jsdi-path}/src/gen">
			<classpath refid="javah-classpath"/>
		</javah>
		<javah class="${jsdi-package}.abi.x86.NativeCallX86" classpath="${java-target-dir}" destdir="${jsdi-path}/src/gen"/>
		<javah class="${jsdi-package}.abi.amd64.ThunkManager64" destdir="${jsdi-path}/src/gen">
			<classpath refid="javah-classpath"/>
		</javah>
		<javah class="${jsdi-package}.abi.amd64.NativeCall64" classpath="${java-target-dir}" destdir="${jsdi-path}/src/gen"/>
		<!--  Unfortunately, javah creates headers for inner classes which
			  themselves contain no native methods. Clean up those extra
			  files. -->
		<delete>
			<fileset dir="${jsdi-path}/src/gen">
				<not>
					<contains text="JNIEXPORT"/>
				</not>
			</fileset>
		</delete>
	</target>

</project>
